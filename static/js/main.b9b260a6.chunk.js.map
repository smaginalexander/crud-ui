{"version":3,"sources":["components/DataItem/DataItem.js","components/DataList/DataList.js","api/api.js","components/App/App.js","index.js","registerServiceWorker.js"],"names":["DataItem","item","deleteData","updateData","React","useState","activeUpdate","setActiveUpdate","data","name","newNameValue","setNewNameValue","age","newAgeValue","setNewAgeValue","changeUpdatedName","e","target","value","changeUpdatedAge","className","onChange","readOnly","onClick","_id","DataList","div","map","key","api","config","this","_url","url","_headers","headers","res","ok","json","Promise","reject","status","fetch","method","then","_checkResult","id","newName","newAge","body","JSON","stringify","console","log","App","setData","setName","setAge","useEffect","getData","onSubmit","preventDefault","loadNewData","catch","err","placeholder","required","type","newData","filter","ReactDOM","render","document","getElementById","navigator","window","addEventListener","swUrl","process","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","error"],"mappings":"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","file":"static/js/main.b9b260a6.chunk.js","sourcesContent":["import React from 'react';\r\nimport './DataItem.css';\r\n\r\nfunction DataItem({ item, deleteData, updateData }) {\r\n    const [activeUpdate, setActiveUpdate] = React.useState(false)\r\n    const [newNameValue, setNewNameValue] = React.useState(item.data.name)\r\n    const [newAgeValue, setNewAgeValue] = React.useState(item.data.age)\r\n\r\n\r\n    function changeUpdatedName(e) {\r\n        setNewNameValue(e.target.value)\r\n    }\r\n    function changeUpdatedAge(e) {\r\n        setNewAgeValue(e.target.value)\r\n    }\r\n\r\n    function updateClick() {\r\n        updateData(item._id, newNameValue, newAgeValue)\r\n        setActiveUpdate(false)\r\n    }\r\n\r\n    function onRedactBtn() {\r\n        setActiveUpdate(true)\r\n    }\r\n\r\n    function onDeleteClick() {\r\n        deleteData(item._id);\r\n    }\r\n\r\n    return (\r\n        <tr>\r\n            {activeUpdate ?\r\n                <>\r\n                    <td><input className='table__input table__input_active' value={newNameValue} onChange={changeUpdatedName}></input></td>\r\n                    <td><input className='table__input table__input_active' value={newAgeValue} onChange={changeUpdatedAge}></input></td>\r\n                </>\r\n                :\r\n                <>\r\n                    <td><input className='table__input' value={newNameValue} onChange={changeUpdatedName} readOnly></input></td>\r\n                    <td><input className='table__input' value={newAgeValue} onChange={changeUpdatedAge} readOnly></input></td>\r\n                </>\r\n            }\r\n            <td>\r\n                <div className=\"buttnon-container\">\r\n                    <button className=\"buttnon-container__button buttnon-container__button_type_delete\" onClick={onDeleteClick}>Удалить</button>\r\n                    {activeUpdate ?\r\n                        <button className=\"buttnon-container__button buttnon-container__button_type_save\" onClick={updateClick}>Сохранить</button>\r\n                        :\r\n                        <button className=\"buttnon-container__button buttnon-container__button_type_edit\" onClick={onRedactBtn}>Редактировать</button>\r\n                    }\r\n                </div>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default DataItem;","import React from 'react';\r\nimport './DataList.css';\r\nimport DataLItem from '../DataItem/DataItem';\r\n\r\nfunction DataList({ data, deleteData, updateData }) {\r\n    return (\r\n        <div div className=\"data-list\" >\r\n            <table>\r\n                <tbody>\r\n                    <tr className=\"table-headers\"><th>имя</th><th>возраст</th></tr>\r\n                    {\r\n                        data.map((item) => (\r\n                            <DataLItem key={item._id} item={item} deleteData={deleteData} updateData={updateData} />\r\n                        ))\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </div >\r\n    );\r\n}\r\nexport default DataList;","class Api {\r\n    constructor(config) {\r\n        this._url = config.url;\r\n        this._headers = config.headers;\r\n    }\r\n\r\n    _checkResult(res) {\r\n        if (res.ok) {\r\n            return res.json();\r\n        } else {\r\n            return Promise.reject(`Ошибка: ${res.status}`);\r\n        }\r\n    }\r\n    //получить данные\r\n    getData() {\r\n        return fetch(\r\n            `${this._url}`,\r\n            {\r\n                method: 'GET',\r\n                headers: {\r\n                    \"Content-type\": 'application/json',\r\n                },\r\n            })\r\n            .then(this._checkResult)\r\n    }\r\n    // редактирование записи\r\n    updateData(id, newName, newAge) {\r\n        return fetch(\r\n            `${this._url}/${id}`,\r\n            {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-type\": 'application/json',\r\n                },\r\n                body: JSON.stringify({ data: { name: newName, age: newAge } })\r\n            })\r\n            .then(this._checkResult)\r\n    }\r\n\r\n    // добавление новой записи\r\n    loadNewData(name, age) {\r\n        return fetch(`${this._url}`, {\r\n            method: \"PUT\",\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ data: { name: name, age: age } })\r\n        })\r\n            .then(this._checkResult)\r\n    }\r\n\r\n    //удаление записи\r\n    deleteData(id) {\r\n        console.log(id);\r\n        return fetch(`${this._url}/${id}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        })\r\n            .then(this._checkResult);\r\n    }\r\n\r\n}\r\n\r\nexport const api = new Api({\r\n    url: 'http://178.128.196.163:3000/api/records',\r\n    headers: {\r\n        \"Content-type\": \"application/json\",\r\n    },\r\n})","import React from 'react';\r\nimport './App.css';\r\nimport DataList from '../DataList/DataList';\r\nimport { api } from '../../api/api';\r\n\r\nfunction App() {\r\n  const [data, setData] = React.useState([])\r\n  const [name, setName] = React.useState('')\r\n  const [age, setAge] = React.useState('')\r\n\r\n  function changeName(e) {\r\n    setName(e.target.value)\r\n  }\r\n\r\n  function changeAge(e) {\r\n    setAge(e.target.value)\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    api.getData()\r\n      .then(res => setData(res))\r\n  }, []);\r\n\r\n  function addData(e) {\r\n    e.preventDefault()\r\n    api.loadNewData(name, age)\r\n      .then(() => {\r\n        api.getData()\r\n          .then(res => setData(res))\r\n      })\r\n      .catch(err => console.log(err))\r\n  }\r\n\r\n\r\n  function updateData(id, newName, newAge) {\r\n    api.updateData(id, newName, newAge)\r\n      .catch(err => console.log(err))\r\n  }\r\n\r\n  function deleteData(id) {\r\n    api.deleteData(id)\r\n      .then(() => {\r\n        const newData = data.filter(\r\n          (item) => item._id !== id\r\n        )\r\n        setData(newData);\r\n      })\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <form className=\"form\" onSubmit={addData}>\r\n        <input className=\"form__input\" onChange={changeName} placeholder=\"Имя\" required></input>\r\n        <input className=\"form__input\" onChange={changeAge} placeholder=\"Возраст\" required></input>\r\n        <button className=\"form__button\" type=\"submit\">Добавить</button>\r\n      </form>\r\n      <DataList updateData={updateData} deleteData={deleteData} data={data} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App/App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport './index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n      navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n          registration.onupdatefound = () => {\r\n            const installingWorker = registration.installing;\r\n            installingWorker.onstatechange = () => {\r\n              if (installingWorker.state === 'installed') {\r\n                if (navigator.serviceWorker.controller) {\r\n                  // At this point, the old content will have been purged and\r\n                  // the fresh content will have been added to the cache.\r\n                  // It's the perfect time to display a \"New content is\r\n                  // available; please refresh.\" message in your web app.\r\n                  console.log('New content is available; please refresh.');\r\n                } else {\r\n                  // At this point, everything has been precached.\r\n                  // It's the perfect time to display a\r\n                  // \"Content is cached for offline use.\" message.\r\n                  console.log('Content is cached for offline use.');\r\n                }\r\n              }\r\n            };\r\n          };\r\n        })\r\n        .catch(error => {\r\n          console.error('Error during service worker registration:', error);\r\n        });\r\n    });\r\n  }\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":""}